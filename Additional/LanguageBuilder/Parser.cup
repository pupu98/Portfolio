package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal RETURN, PRINT, SEMICOLON;
terminal PLUS, MINUS, LPAREN, RPAREN, LCURLY, RCURLY, TIMES, UMINUS;
terminal Long    INTCONST;
terminal String  IDENT;
terminal INT;
terminal LARGER, LESS, LAREQ, LESEQ, EQ, NOTEQ;
terminal OR, AND, NOT, IS;
terminal IF, ELSE;
terminal NIL;

non terminal Program         program;
non terminal VarDecl         varDecl;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal StmtList        stmtList;
non terminal Stmt            stmt;
non terminal Cond            cond;
non terminal UnaryCond       unaryCond;
non terminal ExprCond        exprCond;

precedence left ELSE;
precedence left OR, AND;
precedence left NOT;
precedence left LARGER, LESS, LAREQ, LESEQ, EQ, NOTEQ;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS, INT;


start with program;


program ::= INT IDENT LPAREN INT IDENT: arg RPAREN LCURLY stmtList: sl RCURLY
            {: RESULT = new Program(arg, sl, loc(slleft, slright)); :}
         ;

varDecl ::= INT IDENT:arg
             {: RESULT = new VarDecl(arg, loc(argleft, argright)); :}
         ;

stmtList ::= stmt:s stmtList:sl
            {: RESULT = new StmtList(s, sl, loc(slleft, slright)); :}
         |  /*empty*/
         ;

stmt ::= varDecl:vd IS expr:e SEMICOLON
            {: RESULT = new DeclStmt(vd, e, loc(eleft, eright)); :}
         |  IF LPAREN cond:co RPAREN stmt:s
            {: RESULT = new IfStmt(co, s, loc(sleft, sright)); :}
         |  IF LPAREN cond:co RPAREN stmt:s1 ELSE stmt:s2
            {: RESULT = new IfElseStmt(co, s1, s2, loc(s1left, s2right)); :}
         |  PRINT expr:e SEMICOLON
            {: RESULT = new PrintStmt(e, loc(eright, eleft)); :}
         |  RETURN expr:e SEMICOLON
            {: RESULT = new ReturnStmt(e, loc(eright, eleft)); :}
         |  LCURLY stmtList:sl RCURLY
            {: RESULT = sl; :}
         ; 

cond ::= unaryCond:c
            {: RESULT = c; :}
         |  exprCond:c
            {: RESULT = c; :}
         |  NOT cond:c
            {: RESULT = new NotCond(c, loc(cleft,cright)); :}
         |  LPAREN cond:c RPAREN 
            {: RESULT = c; :}
         ;

unaryCond ::= cond:c1 AND cond:c2
            {: RESULT = new UnaryCond(c1, UnaryCond.AND, c2, loc(c1left, c2right)); :}
         |  cond:c1 OR cond:c2
            {: RESULT = new UnaryCond(c1, UnaryCond.OR, c2, loc(c1left, c2right)); :}
         ;

exprCond ::= expr:e1 LARGER expr:e2
            {: RESULT = new ExprCond(e1, ExprCond.LARGER, e2, loc(e1left, e2right)); :}
         |  expr:e1 LESS expr:e2
            {: RESULT = new ExprCond(e1, ExprCond.LESS, e2, loc(e1left, e2right)); :}
         |  expr:e1 LAREQ expr:e2
            {: RESULT = new ExprCond(e1, ExprCond.LAREQ, e2, loc(e1left, e2right)); :}
         |  expr:e1 LESEQ expr:e2
            {: RESULT = new ExprCond(e1, ExprCond.LESEQ, e2, loc(e1left, e2right)); :}
         |  expr:e1 EQ expr:e2
            {: RESULT = new ExprCond(e1, ExprCond.EQ, e2, loc(e1left, e2right)); :}
         |  expr:e1 NOTEQ expr:e2
            {: RESULT = new ExprCond(e1, ExprCond.NOTEQ, e2, loc(e1left, e2right)); :}
        ;
         

expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  IDENT: arg
         {: RESULT = new IdentExpr(arg, loc(argleft, argright)); :}
      |  MINUS expr:e
         {: RESULT = new UnaryMinusExpr(e, loc(eright, eleft)); :}  
         %prec UMINUS
      |  binaryExpr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
            ;
